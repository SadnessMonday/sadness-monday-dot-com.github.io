{
  "api/SadnessMonday.NomadsRuntime.MultipleNomadsException.html": {
    "href": "api/SadnessMonday.NomadsRuntime.MultipleNomadsException.html",
    "title": "Class MultipleNomadsException | Nomads Scripting Reference",
    "keywords": "Class MultipleNomadsException Namespace SadnessMonday.NomadsRuntime Assembly Nomads Runtime.dll public class MultipleNomadsException : Exception, ISerializable Inheritance object Exception MultipleNomadsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MultipleNomadsException(Type, IEnumerable<Component>) public MultipleNomadsException(Type t, IEnumerable<Component> instances) Parameters t Type instances IEnumerable<Component>"
  },
  "api/SadnessMonday.NomadsRuntime.Nomad.html": {
    "href": "api/SadnessMonday.NomadsRuntime.Nomad.html",
    "title": "Class Nomad | Nomads Scripting Reference",
    "keywords": "Class Nomad Namespace SadnessMonday.NomadsRuntime Assembly Nomads Runtime.dll A nomad is a prefab which can easily be accessed from anywhere in the project. [DisallowMultipleComponent] public sealed class Nomad : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Nomad Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ID public string ID { get; } Property Value string"
  },
  "api/SadnessMonday.NomadsRuntime.NomadRef-1.html": {
    "href": "api/SadnessMonday.NomadsRuntime.NomadRef-1.html",
    "title": "Struct NomadRef<T> | Nomads Scripting Reference",
    "keywords": "Struct NomadRef<T> Namespace SadnessMonday.NomadsRuntime Assembly Nomads Runtime.dll Instead of a direct reference to a prefab, you can use a NomadRef. This lets you drag and drop a prefab into a slot in the inspector like you are used to. However at runtime your reference will be to a runtime instance rather than to the prefab itself. [Serializable] public struct NomadRef<T> : IDisposable Type Parameters T Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Value public T Value { get; } Property Value T Methods Dispose() public void Dispose() Operators implicit operator T(NomadRef<T>) public static implicit operator T(NomadRef<T> reference) Parameters reference NomadRef<T> Returns T"
  },
  "api/SadnessMonday.NomadsRuntime.NomadicScene.html": {
    "href": "api/SadnessMonday.NomadsRuntime.NomadicScene.html",
    "title": "Class NomadicScene | Nomads Scripting Reference",
    "keywords": "Class NomadicScene Namespace SadnessMonday.NomadsRuntime Assembly Nomads Runtime.dll Used internally to track Nomad prefabs and instances. public class NomadicScene : ScriptableObject, ISerializationCallbackReceiver Inheritance object Object ScriptableObject NomadicScene Implements ISerializationCallbackReceiver Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Instance public static NomadicScene Instance { get; } Property Value NomadicScene Methods Clear() public void Clear() GetInstance<T>() public T GetInstance<T>() Returns T Type Parameters T GetInstance<T>(string) public T GetInstance<T>(string key) Parameters key string Returns T Type Parameters T GetInstances<T>() public IReadOnlyList<T> GetInstances<T>() Returns IReadOnlyList<T> Type Parameters T GetInstances<T>(string) public IReadOnlyList<T> GetInstances<T>(string id) Parameters id string Returns IReadOnlyList<T> Type Parameters T OnAfterDeserialize() Implement this method to receive a callback after Unity deserializes your object. public void OnAfterDeserialize() OnBeforeSerialize() Implement this method to receive a callback before Unity serializes your object. public void OnBeforeSerialize() TryGetInstance<T>(out T) public bool TryGetInstance<T>(out T instance) Parameters instance T Returns bool Type Parameters T Unload<T>() public bool Unload<T>() Returns bool Type Parameters T"
  },
  "api/SadnessMonday.NomadsRuntime.Nomads.html": {
    "href": "api/SadnessMonday.NomadsRuntime.Nomads.html",
    "title": "Class Nomads | Nomads Scripting Reference",
    "keywords": "Class Nomads Namespace SadnessMonday.NomadsRuntime Assembly Nomads Runtime.dll Nomads is a static class which is the main entry point for interacting with Nomads. public static class Nomads Inheritance object Nomads Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAll<T>() Get All nomads of the given type. public static IReadOnlyList<T> GetAll<T>() Returns IReadOnlyList<T> A collection of nomad instances of the given type Type Parameters T The type of the desired nomad instances GetAll<T>(string) Get all nomads of the given type with the given ID. public static IReadOnlyList<T> GetAll<T>(string id) Parameters id string Returns IReadOnlyList<T> A collection of nomad instances of the given type Type Parameters T The type of the desired nomad instances GetIfInitialized<T>(out T) Get a nomad instance, but only if it has been previously instantiated. public static bool GetIfInitialized<T>(out T instance) Parameters instance T A nomad instance of the given type, if it was previously initialized Returns bool true if the nomad instance was already instantiated Type Parameters T The type of the desired nomad instance GetNomadCount<T>() Returns the number of nomads that exist of the given type. public static int GetNomadCount<T>() Returns int The number of nomads that exist of the given type. Type Parameters T The type to get the count for Get<T>() Get a nomad instance of the given type. public static T Get<T>() Returns T A nomad instance of the given type Type Parameters T The type of the desired nomad instance Exceptions MultipleNomadsException Thrown if there are multiple nomads of the given type. Get<T>(string) Get a nomad instance of the given type with the given ID. public static T Get<T>(string id) Parameters id string Returns T A nomad instance of the given type Type Parameters T The type of the desired nomad instance Exceptions MultipleNomadsException Thrown if there are multiple nomads of the given type with the given ID. NomadExists<T>() Determine whether a nomad of the given type is registered with Nomads. public static bool NomadExists<T>() Returns bool true if there is a nomad prefab in existence with the given type. Type Parameters T The desired nomad type Reset<T>() Destroys the Nomad instance for the given type public static void Reset<T>() Type Parameters T The type of nomad instance to destroy Reset<T>(T) Destroys the provided nomad instance. public static void Reset<T>(T component) Parameters component T A component on the nomad instance that should be destroyed Type Parameters T The type of nomad instance to destroy"
  },
  "api/SadnessMonday.NomadsRuntime.html": {
    "href": "api/SadnessMonday.NomadsRuntime.html",
    "title": "Namespace SadnessMonday.NomadsRuntime | Nomads Scripting Reference",
    "keywords": "Namespace SadnessMonday.NomadsRuntime Classes MultipleNomadsException Nomad A nomad is a prefab which can easily be accessed from anywhere in the project. NomadicScene Used internally to track Nomad prefabs and instances. Nomads Nomads is a static class which is the main entry point for interacting with Nomads. Structs NomadRef<T> Instead of a direct reference to a prefab, you can use a NomadRef. This lets you drag and drop a prefab into a slot in the inspector like you are used to. However at runtime your reference will be to a runtime instance rather than to the prefab itself."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Nomads Scripting Reference",
    "keywords": "Getting Started To turn a prefab into a Nomad simply add the Nomad component to it. Then you can access your Nomad easily from anywhere with: MyScript instance = Nomads.Get<MyScript>();"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Nomads Scripting Reference",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE for the Nomads API reference. | Nomads Scripting Reference",
    "keywords": "This is the HOMEPAGE for the Nomads API reference. The API docs can be found here"
  }
}